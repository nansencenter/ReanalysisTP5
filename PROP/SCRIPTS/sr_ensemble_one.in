#!/bin/bash -l

#SBATCH --account=nn9481k 
##SBATCH --account=nn2993k 

#SBATCH -J  T04BJNAME

#SBATCH -N 5   # number of nodes
##SBATCH -n 30   # number of cores in each node 
## Each compute node has 24 cores (See more details in section Hardware on Sisu User Guide).

## System message output file
#SBATCH -o log/HYCICE.JNAME.out

## System error message file
#SBATCH -e log/HYCICE.JNAME.err

## How long job takes, wallclock time hh:mm:ss
#SBATCH -t 06:00:00
#SBATCH --exclusive 

#SBATCH  --mail-type=END
##SBATCH --mail-user=jiping.xie@nersc.no

#set -x

set -e              # Exit on errors
set -u              # Disallow unset variables

## On Fram:
export Ncor=10
export NMPI=319

## On Betzy:
export Ncor=5
export NMPI=636

#export Ncor=4
#export NMPI=511

export SLURM_SUBMIT_DIR=$(pwd)

MONITORINTERVAL=10 # time interval for periodic checks on job status


# Enter directory from where the job was submitted
cd $SLURM_SUBMIT_DIR       ||  { echo "Could not go to dir $SLURM_SUBMIT_DIR  "; exit 1; }

# ------------------- Fetch Environment ------------------------------
# -------- these are needed in preprocess scripts---------------------
echo "SLURM_JOBID    = $SLURM_JOBID     "
echo "SLURM_SUBMIT_DIR= $SLURM_SUBMIT_DIR "
#[ -z "$NOMP" ] && NOMP=0

# Enter directory from where the job was submitted
cd $SLURM_SUBMIT_DIR       ||  { echo "Could not go to dir $SLURM_O_WORKDIR  "; exit 1; }

if [ "$1" -gt "-1" -a "$2" -gt "-1" ]; then
  echo 'mems: ' $1 '~' $2
  mem1=MEM1
  mem2=MEM2
  (( Nens=mem2-mem1+1 ))
  if [ $# == 3 ]; then
     echo 'mems: ' $1 '~' $2 ': ' ${Nens} $3
  else
     echo 'mems: ' $1 '~' $2 ': ' ${Nens}
  fi
else
  exit $? 
fi


# the third parameter define the model date2 yyyy_ddd
READYRT=0

# Initialize environment (sets Scratch dir ($S), Data dir $D ++ )
source ../REGION.src  || { echo "Could not source ../REGION.src "; exit 1; }
source ./EXPT.src  || { echo "Could not source EXPT.src"; exit 1; }
echo "NMPI =$NMPI (Number of MPI tasks needed for running job) "

#ulimit -s unlimited
ulimit -s 2000000


# submit job
for imem in `seq $mem1 $mem2`; do
   cd $SLURM_SUBMIT_DIR       ||  { echo "Could not go to dir $SLURM_SUBMIT_DIR  "; exit 1; }
   Exdir=mem`echo 00${imem} | tail -4c`
   echo "Running one member of $?: " $imem
   if [ ${imem} -gt 0 -a -s ${Exdir}/SCRATCH ]; then
      cd ${Exdir}/SCRATCH
      if [ $# == 3 ]; then
         Moddate2=$3
         READYRT=`find ./ -maxdepth 1 -name restart.${Moddate2}_00_0000.a | wc -l`
      fi
      if [ ${READYRT} == 0 ]; then 
         for ii in $(ls PET*LogFile) ; do
            rm $ii
         done
         for ii in $(ls arch*.?) ; do
            rm $ii
         done
         [ -r ovrtn_out ] && rm ovrtn_out
         [ -r KEEP ] && rm KEEP 
         [ -r summary_out ] && rm summary_out 
         #if [ ${iPert} -gt 1 ]; then
         #   for ifile in ${Pervars}; do
         #      rm forcing.${ifile}.[ab]
         #      ln ../../SCRATCH/forcing.${ifile}.a .
         #      ln ../../SCRATCH/forcing.${ifile}.b .
         #   done
         #   ./force_perturb-2.2 era-i era40
         #   echo " imem=${imem} replaced ${Pervars} ... "
         #   for ifile in ${Pervars}; do
         #      if [ -r tst.forcing.${ifile}.a -a -r tst.forcing.${ifile}.b ]; then
         #         rm forcing.${ifile}.[ab]
         #         ln -sf tst.forcing.${ifile}.a forcing.${ifile}.a
         #         ln -sf tst.forcing.${ifile}.b forcing.${ifile}.b
         #      fi
         #   done
         #   # Perturbation test
         #   Fdirup='../../SCRATCH/'
         #   for ifile in ${PervarsTest}; do
         #      rm forcing.${ifile}.[ab]
         #      Fraw=${ifile}_${Exdir}
         #      if [ -r ${Fdirup}${Fraw}.a -a -r ${Fdirup}${Fraw}.b ]; then
         #         ln -sf ${Fdirup}${Fraw}.a forcing.${ifile}.a
         #         ln -sf ${Fdirup}${Fraw}.b forcing.${ifile}.b
         #      else
         #         echo "Missing the test foring files"
         #         exit 0
         #      fi
         #   done
         # 
         #fi
         srun --mpi=pmi2 -N $Ncor -n $NMPI ./hycom_cice  
      fi
      READYRT=`find ./ -maxdepth 1 -name restart.${Moddate2}_00_0000.a | wc -l`
      if [ ${READYRT} != 0 ]; then 

         # Must be done under mem???/SCRATCH to run this script
         [ ! -r ../data ] && mkdir ../data
         [ ! -r ../data/cice ] && mkdir ../data/cice

         # restart. and archm
         Fhycom="restart. archm. archv."
         for ifile in ${Fhycom} ; do
         for i in $(ls -- ${ifile}*.[ab]) ; do
             if [ -L "${i}" ]; then
                rm $i
             else
                mv $i ../data/.
             fi
         done
         done

         # sea ice fields
         Fcice="iced. iceh."
         for ifile in ${Fcice}; do
         for i in $(ls -- cice/${ifile}*.nc); do
            if [ -L "${i}" ]; then
               rm $i
            else
               mv $i ../data/cice/.
            fi
         done
         done

         # Copy some files useful for analysis
         for i in $(ls regional.grid.* regional.depth.* blkdat.input ice_in cice_*.nc) ; do
            cp $i ../data/.
         done
         echo "GOODRUN" > ../hycom.stop

      fi 
   fi
done


exit $?
